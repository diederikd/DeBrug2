package Position.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;

public final class PushGraphicalHint_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public PushGraphicalHint_Intention() {
    super(Kind.NORMAL, true, new SNodePointer("r:84f2de3d-0e46-4fdb-a91f-f5f26d2e8ce8(Position.intentions)", "4611417329805505560"));
  }
  @Override
  public String getPresentation() {
    return "PushGraphicalHint";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    EditorContext context = editorContext;
    try {
      return !(Sequence.fromIterable(Sequence.fromArray(context.getEditorComponent().getUpdater().getInitialEditorHints())).contains("Position.editor.PositionHints.graphical"));
    } catch (NullPointerException nullPointerException) {
    }
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new PushGraphicalHint_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Show Graphical";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      EditorContext context = editorContext;
      String[] editorhint = {"Position.editor.PositionHints.graphical"};
      context.getEditorComponent().getUpdater().setInitialEditorHints(editorhint);
      context.getEditorComponent().rebuildEditorContent();
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return PushGraphicalHint_Intention.this;
    }
  }
}
