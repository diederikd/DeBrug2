package Position.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AbstractDefinition = 0;
  public static final int AbstractEventType = 1;
  public static final int Action = 2;
  public static final int ActionType = 3;
  public static final int Condition = 4;
  public static final int DefinitionExpression = 5;
  public static final int Description = 6;
  public static final int EventInRole = 7;
  public static final int EventType = 8;
  public static final int ISpecificationElement = 9;
  public static final int If = 10;
  public static final int ImmunityType = 11;
  public static final int Method = 12;
  public static final int Object = 13;
  public static final int ObjectType = 14;
  public static final int ObjectTypeInRole = 15;
  public static final int ObjectValue = 16;
  public static final int ObligationType = 17;
  public static final int PowerType = 18;
  public static final int Specification = 19;
  public static final int State = 20;
  public static final int StateType = 21;
  public static final int Subject = 22;
  public static final int SubjectType = 23;
  public static final int SubjectTypeInRole = 24;
  public static final int SubjectTypeReference = 25;
  public static final int SubjectValue = 26;
  public static final int TimeElapseType = 27;
  public static final int Transition = 28;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L);
    builder.put(0x5c2d31977f63d729L, AbstractDefinition);
    builder.put(0x337a9c0102b9418cL, AbstractEventType);
    builder.put(0x5816a80d01b605e4L, Action);
    builder.put(0x313fc3cd0ceebeb5L, ActionType);
    builder.put(0x2ccf4d5a1f0ae72eL, Condition);
    builder.put(0x5c2d31977f63d43cL, DefinitionExpression);
    builder.put(0x5c2d31977f382b76L, Description);
    builder.put(0x33a3a1e244936373L, EventInRole);
    builder.put(0x5c2d31977fb1501aL, EventType);
    builder.put(0x33a3a1e24492f50bL, ISpecificationElement);
    builder.put(0x2ccf4d5a1f0d8528L, If);
    builder.put(0x2ccf4d5a1f4ef965L, ImmunityType);
    builder.put(0x5c2d31977fb66e7dL, Method);
    builder.put(0x81c91b682e3b382L, Object);
    builder.put(0x337a9c0102b6f98aL, ObjectType);
    builder.put(0x33a3a1e244935a08L, ObjectTypeInRole);
    builder.put(0x319083e78e879dc1L, ObjectValue);
    builder.put(0x2ccf4d5a1f3e01d6L, ObligationType);
    builder.put(0x313fc3cd0cdf2c74L, PowerType);
    builder.put(0x337a9c0102b598d2L, Specification);
    builder.put(0x7e8caa0ea161570dL, State);
    builder.put(0x337a9c0102b43ef1L, StateType);
    builder.put(0x81c91b682e3b381L, Subject);
    builder.put(0x337a9c0102b667b5L, SubjectType);
    builder.put(0x33a3a1e244917bafL, SubjectTypeInRole);
    builder.put(0x5c2d31977f6feff3L, SubjectTypeReference);
    builder.put(0x319083e78e879dc2L, SubjectValue);
    builder.put(0x5c2d31977fb13f4eL, TimeElapseType);
    builder.put(0x78836771e8cfbf8dL, Transition);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
