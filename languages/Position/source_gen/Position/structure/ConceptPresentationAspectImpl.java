package Position.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AbstractDefinition;
  private ConceptPresentation props_AbstractEventType;
  private ConceptPresentation props_Action;
  private ConceptPresentation props_ActionType;
  private ConceptPresentation props_Condition;
  private ConceptPresentation props_DefinitionExpression;
  private ConceptPresentation props_Description;
  private ConceptPresentation props_EventInRole;
  private ConceptPresentation props_EventType;
  private ConceptPresentation props_ISpecificationElement;
  private ConceptPresentation props_If;
  private ConceptPresentation props_ImmunityType;
  private ConceptPresentation props_Method;
  private ConceptPresentation props_Object;
  private ConceptPresentation props_ObjectType;
  private ConceptPresentation props_ObjectTypeInRole;
  private ConceptPresentation props_ObjectValue;
  private ConceptPresentation props_ObligationType;
  private ConceptPresentation props_PowerType;
  private ConceptPresentation props_Specification;
  private ConceptPresentation props_State;
  private ConceptPresentation props_StateType;
  private ConceptPresentation props_Subject;
  private ConceptPresentation props_SubjectType;
  private ConceptPresentation props_SubjectTypeInRole;
  private ConceptPresentation props_SubjectTypeReference;
  private ConceptPresentation props_SubjectValue;
  private ConceptPresentation props_TimeElapseType;
  private ConceptPresentation props_Transition;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractDefinition:
        if (props_AbstractDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractDefinition = cpb.create();
        }
        return props_AbstractDefinition;
      case LanguageConceptSwitch.AbstractEventType:
        if (props_AbstractEventType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractEventType = cpb.create();
        }
        return props_AbstractEventType;
      case LanguageConceptSwitch.Action:
        if (props_Action == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Action = cpb.create();
        }
        return props_Action;
      case LanguageConceptSwitch.ActionType:
        if (props_ActionType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ActionType = cpb.create();
        }
        return props_ActionType;
      case LanguageConceptSwitch.Condition:
        if (props_Condition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Condition = cpb.create();
        }
        return props_Condition;
      case LanguageConceptSwitch.DefinitionExpression:
        if (props_DefinitionExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("expressie");
          props_DefinitionExpression = cpb.create();
        }
        return props_DefinitionExpression;
      case LanguageConceptSwitch.Description:
        if (props_Description == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Description = cpb.create();
        }
        return props_Description;
      case LanguageConceptSwitch.EventInRole:
        if (props_EventInRole == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EventInRole = cpb.create();
        }
        return props_EventInRole;
      case LanguageConceptSwitch.EventType:
        if (props_EventType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EventType = cpb.create();
        }
        return props_EventType;
      case LanguageConceptSwitch.ISpecificationElement:
        if (props_ISpecificationElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ISpecificationElement = cpb.create();
        }
        return props_ISpecificationElement;
      case LanguageConceptSwitch.If:
        if (props_If == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("If");
          props_If = cpb.create();
        }
        return props_If;
      case LanguageConceptSwitch.ImmunityType:
        if (props_ImmunityType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ImmunityType = cpb.create();
        }
        return props_ImmunityType;
      case LanguageConceptSwitch.Method:
        if (props_Method == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Method");
          props_Method = cpb.create();
        }
        return props_Method;
      case LanguageConceptSwitch.Object:
        if (props_Object == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Object = cpb.create();
        }
        return props_Object;
      case LanguageConceptSwitch.ObjectType:
        if (props_ObjectType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ObjectType = cpb.create();
        }
        return props_ObjectType;
      case LanguageConceptSwitch.ObjectTypeInRole:
        if (props_ObjectTypeInRole == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ObjectTypeInRole = cpb.create();
        }
        return props_ObjectTypeInRole;
      case LanguageConceptSwitch.ObjectValue:
        if (props_ObjectValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x2aacdfbf487f43acL, 0xa43119468403f2c5L, 0xab4c0de8e6a1284L, 0xab4c0de8e6a1285L, "value", "", "");
          props_ObjectValue = cpb.create();
        }
        return props_ObjectValue;
      case LanguageConceptSwitch.ObligationType:
        if (props_ObligationType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ObligationType = cpb.create();
        }
        return props_ObligationType;
      case LanguageConceptSwitch.PowerType:
        if (props_PowerType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PowerType = cpb.create();
        }
        return props_PowerType;
      case LanguageConceptSwitch.Specification:
        if (props_Specification == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Specification = cpb.create();
        }
        return props_Specification;
      case LanguageConceptSwitch.State:
        if (props_State == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_State = cpb.create();
        }
        return props_State;
      case LanguageConceptSwitch.StateType:
        if (props_StateType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_StateType = cpb.create();
        }
        return props_StateType;
      case LanguageConceptSwitch.Subject:
        if (props_Subject == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Subject = cpb.create();
        }
        return props_Subject;
      case LanguageConceptSwitch.SubjectType:
        if (props_SubjectType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SubjectType = cpb.create();
        }
        return props_SubjectType;
      case LanguageConceptSwitch.SubjectTypeInRole:
        if (props_SubjectTypeInRole == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SubjectTypeInRole = cpb.create();
        }
        return props_SubjectTypeInRole;
      case LanguageConceptSwitch.SubjectTypeReference:
        if (props_SubjectTypeReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x5c2d31977f6feff3L, 0x5c2d31977f6feff4L, "subjectType", "", "");
          props_SubjectTypeReference = cpb.create();
        }
        return props_SubjectTypeReference;
      case LanguageConceptSwitch.SubjectValue:
        if (props_SubjectValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x2aacdfbf487f43acL, 0xa43119468403f2c5L, 0xab4c0de8e6a1284L, 0xab4c0de8e6a1285L, "value", "", "");
          props_SubjectValue = cpb.create();
        }
        return props_SubjectValue;
      case LanguageConceptSwitch.TimeElapseType:
        if (props_TimeElapseType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TimeElapseType = cpb.create();
        }
        return props_TimeElapseType;
      case LanguageConceptSwitch.Transition:
        if (props_Transition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Transition");
          props_Transition = cpb.create();
        }
        return props_Transition;
    }
    return null;
  }
}
