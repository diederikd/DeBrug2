package Position.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import jetbrains.mps.openapi.editor.descriptor.EditorHintsProvider;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorHint;
import java.util.Arrays;
import jetbrains.mps.editor.runtime.descriptor.ConceptEditorHintImpl;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase implements EditorHintsProvider {
  private Collection<ConceptEditorHint> myHints = Arrays.<ConceptEditorHint>asList(new ConceptEditorHintImpl("default", "", true, "Position.editor.PositionHints.default"), new ConceptEditorHintImpl("graphical", "graphical", true, "Position.editor.PositionHints.graphical"), new ConceptEditorHintImpl("table", "table", true, "Position.editor.PositionHints.table"), new ConceptEditorHintImpl("button", "", true, "Position.editor.PositionHints.button"));
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Arrays.asList(new ConceptEditor[]{new AbstractEventType_Editor(), new AbstractEventType_graphical_Editor()});
      case 1:
        return Collections.<ConceptEditor>singletonList(new Action_Editor());
      case 2:
        return Arrays.asList(new ConceptEditor[]{new ActionType_Editor(), new ActionType_table_Editor()});
      case 3:
        return Collections.<ConceptEditor>singletonList(new Condition_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new DefinitionExpression_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new Description_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new EventType_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new FactType_table_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new If_Editor());
      case 9:
        return Arrays.asList(new ConceptEditor[]{new ImmunityType_Editor(), new ImmunityType_graphical_Editor()});
      case 10:
        return Arrays.asList(new ConceptEditor[]{new Method_Editor(), new Method_table_Editor()});
      case 11:
        return Collections.<ConceptEditor>singletonList(new Object_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new ObjectType_Editor());
      case 13:
        return Arrays.asList(new ConceptEditor[]{new ObligationType_Editor(), new ObligationType_graphical_Editor()});
      case 14:
        return Arrays.asList(new ConceptEditor[]{new PowerType_Editor(), new PowerType_graphical_Editor()});
      case 15:
        return Arrays.asList(new ConceptEditor[]{new Specification_Editor(), new Specification_graphical_Editor()});
      case 16:
        return Collections.<ConceptEditor>singletonList(new State_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new Subject_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new SubjectType_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new SubjectTypeReference_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new TimeElapseType_Editor());
      case 21:
        return Arrays.asList(new ConceptEditor[]{new Transition_Editor(), new Transition_graphical_Editor()});
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }

  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        if (true) {
          if ("Position.editor.EventInspector".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new EventInspector());
          }
        }
        break;
      case 1:
        if (true) {
          if ("Position.editor.SourceButton".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new SourceButton());
          }
        }
        break;
      case 2:
        if (true) {
          if ("Position.editor.SpecificationTable".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new SpecificationTable());
          }
        }
        break;
      case 3:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0d1a3, editorComponentId)) {
            case 0:
              return Collections.<ConceptEditorComponent>singletonList(new HeaderOfStateType());
            case 1:
              return Collections.<ConceptEditorComponent>singletonList(new StateInspector());
            default:
              return Collections.<ConceptEditorComponent>emptyList();
          }
        }
        break;
      default:
    }
    return Collections.<ConceptEditorComponent>emptyList();
  }
  public Collection<ConceptEditorHint> getHints() {
    return myHints;
  }

  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new Action_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new EventInRole_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new Object_SubstituteMenu());
      case 3:
        return Collections.<SubstituteMenu>singletonList(new ObjectTypeInRole_SubstituteMenu());
      case 4:
        return Collections.<SubstituteMenu>singletonList(new ObjectValue_SubstituteMenu());
      case 5:
        return Collections.<SubstituteMenu>singletonList(new State_SubstituteMenu());
      case 6:
        return Collections.<SubstituteMenu>singletonList(new Subject_SubstituteMenu());
      case 7:
        return Collections.<SubstituteMenu>singletonList(new SubjectTypeInRole_SubstituteMenu());
      case 8:
        return Collections.<SubstituteMenu>singletonList(new SubjectTypeReference_SubstituteMenu());
      case 9:
        return Collections.<SubstituteMenu>singletonList(new SubjectValue_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x337a9c0102b9418cL), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x5816a80d01b605e4L), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x313fc3cd0ceebeb5L), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x2ccf4d5a1f0ae72eL), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x5c2d31977f63d43cL), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x5c2d31977f382b76L), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x5c2d31977fb1501aL), MetaIdFactory.conceptId(0x2aacdfbf487f43acL, 0xa43119468403f2c5L, 0xe475eafb2f3f32dL), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x2ccf4d5a1f0d8528L), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x2ccf4d5a1f4ef965L), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x5c2d31977fb66e7dL), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x81c91b682e3b382L), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x337a9c0102b6f98aL), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x2ccf4d5a1f3e01d6L), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x313fc3cd0cdf2c74L), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x337a9c0102b598d2L), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x7e8caa0ea161570dL), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x81c91b682e3b381L), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x337a9c0102b667b5L), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x5c2d31977f6feff3L), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x5c2d31977fb13f4eL), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x78836771e8cfbf8dL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x337a9c0102b9418cL), MetaIdFactory.conceptId(0x2aacdfbf487f43acL, 0xa43119468403f2c5L, 0xe475eafb2f3f32cL), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x337a9c0102b598d2L), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x337a9c0102b43ef1L)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x5816a80d01b605e4L), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x33a3a1e244936373L), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x81c91b682e3b382L), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x33a3a1e244935a08L), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x319083e78e879dc1L), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x7e8caa0ea161570dL), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x81c91b682e3b381L), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x33a3a1e244917bafL), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x5c2d31977f6feff3L), MetaIdFactory.conceptId(0x1172cef30f894114L, 0xad0ef59cef2bbaa3L, 0x319083e78e879dc2L)).seal();
  private static String[] stringSwitchCases_xbvbvu_a0a0a0d1a3 = new String[]{"Position.editor.HeaderOfStateType", "Position.editor.StateInspector"};
}
