package Simulation.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import DateTime.behavior.DateTime__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import Facts.behavior.Fact__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class Testcases__BehaviorDescriptor extends BaseBHDescriptor {
  private static final Logger LOG = LogManager.getLogger(Testcases__BehaviorDescriptor.class);
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x7e8caa0ea0d06cd6L, "Simulation.structure.Testcases");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Void> executeTests_idws$rq35Qdm = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("executeTests").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("ws$rq35Qdm").registry(REGISTRY).build();
  /*package*/ static final SMethod<Void> executeTestcase_idws$rq36caG = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("executeTestcase").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("ws$rq36caG").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Boolean> allActionsSuccess_idws$rq369Em = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("allActionsSuccess").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("ws$rq369Em").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  /*package*/ static final SMethod<Void> UpdateSimulatedEndState_idws$rq3oqFK = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("UpdateSimulatedEndState").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("ws$rq3oqFK").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<List<SNode>>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(executeTests_idws$rq35Qdm, executeTestcase_idws$rq36caG, allActionsSuccess_idws$rq369Em, UpdateSimulatedEndState_idws$rq3oqFK);

  private static void ___init___(@NotNull SNode __thisNode__) {
    SNodeFactoryOperations.setNewChild(__thisNode__, MetaAdapterFactory.getContainmentLink(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x7e8caa0ea0d06cd6L, 0x645badac5e36e314L, "lastExecution"), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xadd5042bc484352L, 0x832a07af4f0e5913L, 0x56d24b1967e8f32fL, "DateTime.structure.DateTime")));
  }

  /*package*/ static void executeTests_idws$rq35Qdm(@NotNull SNode __thisNode__) {
    DateTime__BehaviorDescriptor.setDateTimeNow_id4cztqIn5h$s.invoke(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x7e8caa0ea0d06cd6L, 0x645badac5e36e314L, "lastExecution")));
    for (SNode testcase : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x7e8caa0ea0d06cd6L, 0x7e8caa0ea0d09296L, "tests")))) {
      Testcases__BehaviorDescriptor.executeTestcase_idws$rq36caG.invoke(__thisNode__, testcase);
      for (SNode testState : ListSequence.fromList(SLinkOperations.getChildren(testcase, MetaAdapterFactory.getContainmentLink(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x7e8caa0ea0d091d3L, 0x7e8caa0ea0d091dbL, "expectedEndTestState")))) {
        SPropertyOperations.set(testState, MetaAdapterFactory.getProperty(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x319083e78ee4905bL, 0x319083e78ee4905cL, "testresult"), "success");
        SPropertyOperations.set(testState, MetaAdapterFactory.getProperty(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x319083e78ee4905bL, 0x645badac5df17e0dL, "testmessage"), " ");
      }
      LoggingRuntime.logMsgView(Level.INFO, "" + !(((boolean) Testcases__BehaviorDescriptor.allActionsSuccess_idws$rq369Em.invoke(__thisNode__, testcase))), Testcases__BehaviorDescriptor.class, null, null);
      if (!(((boolean) Testcases__BehaviorDescriptor.allActionsSuccess_idws$rq369Em.invoke(__thisNode__, testcase)))) {
        for (SNode testState : ListSequence.fromList(SLinkOperations.getChildren(testcase, MetaAdapterFactory.getContainmentLink(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x7e8caa0ea0d091d3L, 0x7e8caa0ea0d091dbL, "expectedEndTestState")))) {
          SPropertyOperations.set(testState, MetaAdapterFactory.getProperty(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x319083e78ee4905bL, 0x319083e78ee4905cL, "testresult"), "inconsistent");
          SPropertyOperations.set(testState, MetaAdapterFactory.getProperty(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x319083e78ee4905bL, 0x645badac5df17e0dL, "testmessage"), "Niet correct door fouten in de handelingen ");
        }
      }
    }
  }
  /*package*/ static void executeTestcase_idws$rq36caG(@NotNull SNode __thisNode__, SNode testcase) {
    List<SNode> activeStates = new ArrayList<SNode>();
    for (SNode s : Sequence.fromIterable(SLinkOperations.collect(SLinkOperations.getChildren(testcase, MetaAdapterFactory.getContainmentLink(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x7e8caa0ea0d091d3L, 0x7e8caa0ea0d091d6L, "beginTestState")), MetaAdapterFactory.getContainmentLink(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x319083e78ec17331L, 0x319083e78ec17585L, "state"))).toListSequence()) {
      ListSequence.fromList(activeStates).addElement(SNodeOperations.copyNode(s));
    }
    for (SNode testaction : ListSequence.fromList(SLinkOperations.getChildren(testcase, MetaAdapterFactory.getContainmentLink(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x7e8caa0ea0d091d3L, 0x7e8caa0ea0d091d8L, "testActions")))) {
      SPropertyOperations.set(testaction, MetaAdapterFactory.getProperty(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x319083e78ee4905bL, 0x319083e78ee4905cL, "testresult"), "success");
      SPropertyOperations.set(testaction, MetaAdapterFactory.getProperty(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x319083e78ee4905bL, 0x645badac5df17e0dL, "testmessage"), " ");
      if (!(Simulation.actionTypeExists(activeStates, SLinkOperations.getTarget(testaction, MetaAdapterFactory.getContainmentLink(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x319083e78ec175a0L, 0x319083e78ec175a1L, "action"))))) {
        SPropertyOperations.set(testaction, MetaAdapterFactory.getProperty(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x319083e78ee4905bL, 0x319083e78ee4905cL, "testresult"), "inconsistent");
        SPropertyOperations.set(testaction, MetaAdapterFactory.getProperty(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x319083e78ee4905bL, 0x645badac5df17e0dL, "testmessage"), "Voor de uitgevoerde handeling bestaat geen rechtsbetrekking");
      }
      if ((Simulation.actionTypeExists(activeStates, SLinkOperations.getTarget(testaction, MetaAdapterFactory.getContainmentLink(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x319083e78ec175a0L, 0x319083e78ec175a1L, "action")))) && (!(Simulation.actionTypeHasValidStartDate(activeStates, SLinkOperations.getTarget(testaction, MetaAdapterFactory.getContainmentLink(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x319083e78ec175a0L, 0x319083e78ec175a1L, "action")))))) {
        SPropertyOperations.set(testaction, MetaAdapterFactory.getProperty(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x319083e78ee4905bL, 0x319083e78ee4905cL, "testresult"), "failed");
        SPropertyOperations.set(testaction, MetaAdapterFactory.getProperty(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x319083e78ee4905bL, 0x645badac5df17e0dL, "testmessage"), "Uitgevoerde handeling is uitgevoerd voordat de rechtsbetrekking bestond.");
      }
      if (ListSequence.fromList(SLinkOperations.getChildren(testcase, MetaAdapterFactory.getContainmentLink(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x7e8caa0ea0d091d3L, 0x7e8caa0ea0d091d8L, "testActions"))).count() > 1) {
        if (SNodeOperations.getIndexInParent(testaction) + 1 < ListSequence.fromList(SLinkOperations.getChildren(testcase, MetaAdapterFactory.getContainmentLink(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x7e8caa0ea0d091d3L, 0x7e8caa0ea0d091d8L, "testActions"))).count()) {
          if (!(((boolean) DateTime__BehaviorDescriptor.isBefore_id6hrFqLuBsXl.invoke(SLinkOperations.getTarget(Fact__BehaviorDescriptor.getValueOfKnownAt_id36gwYufl4AW.invoke(SLinkOperations.getTarget(testaction, MetaAdapterFactory.getContainmentLink(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x319083e78ec175a0L, 0x319083e78ec175a1L, "action"))), MetaAdapterFactory.getContainmentLink(0x2aacdfbf487f43acL, 0xa43119468403f2c5L, 0x432375ab9804ef36L, 0x432375ab9804ef37L, "value")), SLinkOperations.getTarget(Fact__BehaviorDescriptor.getValueOfKnownAt_id36gwYufl4AW.invoke(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getChildren(testcase, MetaAdapterFactory.getContainmentLink(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x7e8caa0ea0d091d3L, 0x7e8caa0ea0d091d8L, "testActions"))).getElement(SNodeOperations.getIndexInParent(testaction) + 1), MetaAdapterFactory.getContainmentLink(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x319083e78ec175a0L, 0x319083e78ec175a1L, "action"))), MetaAdapterFactory.getContainmentLink(0x2aacdfbf487f43acL, 0xa43119468403f2c5L, 0x432375ab9804ef36L, 0x432375ab9804ef37L, "value")))))) {
            SPropertyOperations.set(testaction, MetaAdapterFactory.getProperty(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x319083e78ee4905bL, 0x319083e78ee4905cL, "testresult"), "inconsistent");
            SPropertyOperations.set(testaction, MetaAdapterFactory.getProperty(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x319083e78ee4905bL, 0x645badac5df17e0dL, "testmessage"), "Onjuiste volgorde in het tijdstip uitvoering van handelingen");
          }
        }
      }
      activeStates = Simulation.ExecuteAction(activeStates, SLinkOperations.getTarget(testaction, MetaAdapterFactory.getContainmentLink(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x319083e78ec175a0L, 0x319083e78ec175a1L, "action")));
    }
    Testcases__BehaviorDescriptor.UpdateSimulatedEndState_idws$rq3oqFK.invoke(__thisNode__, testcase, activeStates);
    Testcase__BehaviorDescriptor.isTestCaseSuccessfull_id16mnka5QGOT.invoke(testcase);
  }
  /*package*/ static boolean allActionsSuccess_idws$rq369Em(@NotNull SNode __thisNode__, SNode testcase) {
    return (ListSequence.fromList(SLinkOperations.getChildren(testcase, MetaAdapterFactory.getContainmentLink(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x7e8caa0ea0d091d3L, 0x7e8caa0ea0d091d8L, "testActions"))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.hasValue(it, MetaAdapterFactory.getProperty(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x319083e78ee4905bL, 0x319083e78ee4905cL, "testresult"), "success", "nottested");
      }
    }).count() == ListSequence.fromList(SLinkOperations.getChildren(testcase, MetaAdapterFactory.getContainmentLink(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x7e8caa0ea0d091d3L, 0x7e8caa0ea0d091d8L, "testActions"))).count());
  }
  /*package*/ static void UpdateSimulatedEndState_idws$rq3oqFK(@NotNull SNode __thisNode__, SNode testcase, List<SNode> activeStates) {
    ListSequence.fromList(SLinkOperations.getChildren(testcase, MetaAdapterFactory.getContainmentLink(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x7e8caa0ea0d091d3L, 0x81c91b68348ca7fL, "simulatedEndState"))).clear();
    for (SNode state : ListSequence.fromList(activeStates)) {
      SNode testState = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x319083e78ec17331L, "Simulation.structure.TestState"));
      SLinkOperations.setTarget(testState, MetaAdapterFactory.getContainmentLink(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x319083e78ec17331L, 0x319083e78ec17585L, "state"), state);
      ListSequence.fromList(SLinkOperations.getChildren(testcase, MetaAdapterFactory.getContainmentLink(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x7e8caa0ea0d091d3L, 0x81c91b68348ca7fL, "simulatedEndState"))).addElement(testState);
    }
  }

  /*package*/ Testcases__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        executeTests_idws$rq35Qdm(node);
        return null;
      case 1:
        executeTestcase_idws$rq36caG(node, (SNode) parameters[0]);
        return null;
      case 2:
        return (T) ((Boolean) allActionsSuccess_idws$rq369Em(node, (SNode) parameters[0]));
      case 3:
        UpdateSimulatedEndState_idws$rq3oqFK(node, (SNode) parameters[0], (List<SNode>) parameters[1]);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
