package Simulation.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_EntityTypeRoleType;
  private ConceptPresentation props_EntityTypeSelection;
  private ConceptPresentation props_Itestresult;
  private ConceptPresentation props_Query;
  private ConceptPresentation props_RoleType;
  private ConceptPresentation props_SelectedEntity;
  private ConceptPresentation props_Selection;
  private ConceptPresentation props_TestAction;
  private ConceptPresentation props_TestState;
  private ConceptPresentation props_Testcase;
  private ConceptPresentation props_Testcases;
  private ConceptPresentation props_ValueTypeRoleType;
  private ConceptPresentation props_ValueTypeSelection;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.EntityTypeRoleType:
        if (props_EntityTypeRoleType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EntityTypeRoleType");
          props_EntityTypeRoleType = cpb.create();
        }
        return props_EntityTypeRoleType;
      case LanguageConceptSwitch.EntityTypeSelection:
        if (props_EntityTypeSelection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x106e6c3abb1392efL, 0x106e6c3abb1392f0L, "role", "", "");
          props_EntityTypeSelection = cpb.create();
        }
        return props_EntityTypeSelection;
      case LanguageConceptSwitch.Itestresult:
        if (props_Itestresult == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Itestresult = cpb.create();
        }
        return props_Itestresult;
      case LanguageConceptSwitch.Query:
        if (props_Query == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Query = cpb.create();
        }
        return props_Query;
      case LanguageConceptSwitch.RoleType:
        if (props_RoleType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_RoleType = cpb.create();
        }
        return props_RoleType;
      case LanguageConceptSwitch.SelectedEntity:
        if (props_SelectedEntity == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SelectedEntity");
          props_SelectedEntity = cpb.create();
        }
        return props_SelectedEntity;
      case LanguageConceptSwitch.Selection:
        if (props_Selection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Selection");
          props_Selection = cpb.create();
        }
        return props_Selection;
      case LanguageConceptSwitch.TestAction:
        if (props_TestAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestAction");
          props_TestAction = cpb.create();
        }
        return props_TestAction;
      case LanguageConceptSwitch.TestState:
        if (props_TestState == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestState");
          props_TestState = cpb.create();
        }
        return props_TestState;
      case LanguageConceptSwitch.Testcase:
        if (props_Testcase == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Testcase = cpb.create();
        }
        return props_Testcase;
      case LanguageConceptSwitch.Testcases:
        if (props_Testcases == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Testcases = cpb.create();
        }
        return props_Testcases;
      case LanguageConceptSwitch.ValueTypeRoleType:
        if (props_ValueTypeRoleType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ValueTypeRoleType");
          props_ValueTypeRoleType = cpb.create();
        }
        return props_ValueTypeRoleType;
      case LanguageConceptSwitch.ValueTypeSelection:
        if (props_ValueTypeSelection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xf2b5f4c3283f45e7L, 0x932a2eee84091ad4L, 0x106e6c3abb1392ecL, 0x106e6c3abb1392edL, "role", "", "");
          props_ValueTypeSelection = cpb.create();
        }
        return props_ValueTypeSelection;
    }
    return null;
  }
}
