package DateTime.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Date;
  private ConceptPresentation props_DateTime;
  private ConceptPresentation props_Days;
  private ConceptPresentation props_Duration;
  private ConceptPresentation props_Hours;
  private ConceptPresentation props_Minutes;
  private ConceptPresentation props_Months;
  private ConceptPresentation props_Seconds;
  private ConceptPresentation props_Time;
  private ConceptPresentation props_Years;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Date:
        if (props_Date == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Date");
          props_Date = cpb.create();
        }
        return props_Date;
      case LanguageConceptSwitch.DateTime:
        if (props_DateTime == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DateTime");
          props_DateTime = cpb.create();
        }
        return props_DateTime;
      case LanguageConceptSwitch.Days:
        if (props_Days == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("duur in dagen");
          props_Days = cpb.create();
        }
        return props_Days;
      case LanguageConceptSwitch.Duration:
        if (props_Duration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Duration = cpb.create();
        }
        return props_Duration;
      case LanguageConceptSwitch.Hours:
        if (props_Hours == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("duur in uren");
          props_Hours = cpb.create();
        }
        return props_Hours;
      case LanguageConceptSwitch.Minutes:
        if (props_Minutes == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("duur in minuten");
          props_Minutes = cpb.create();
        }
        return props_Minutes;
      case LanguageConceptSwitch.Months:
        if (props_Months == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("duur in maanden");
          props_Months = cpb.create();
        }
        return props_Months;
      case LanguageConceptSwitch.Seconds:
        if (props_Seconds == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("duur in seconden");
          props_Seconds = cpb.create();
        }
        return props_Seconds;
      case LanguageConceptSwitch.Time:
        if (props_Time == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Time");
          props_Time = cpb.create();
        }
        return props_Time;
      case LanguageConceptSwitch.Years:
        if (props_Years == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("duur in jaren");
          props_Years = cpb.create();
        }
        return props_Years;
    }
    return null;
  }
}
