package Facts.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import Facts.behavior.Fact__BehaviorDescriptor;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class typeof_FactHasUniquePrimairyIdentifier_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_FactHasUniquePrimairyIdentifier_InferenceRule() {
  }
  public void applyRule(final SNode fact, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    // TODO does not work when facttype does not have an identifier 
    boolean result = false;
    SNode factTable = (SNode) SNodeOperations.getParent(fact);
    for (SNode factInFactTable : ListSequence.fromList(SLinkOperations.getChildren(factTable, MetaAdapterFactory.getContainmentLink(0x2aacdfbf487f43acL, 0xa43119468403f2c5L, 0xe475eafb2f67893L, 0xe475eafb2f67896L, "facts")))) {
      if (fact != factInFactTable) {
        if (Fact__BehaviorDescriptor.getPrimaryIdentifier_id14SuKMppbvK.invoke(fact).equals(Fact__BehaviorDescriptor.getPrimaryIdentifier_id14SuKMppbvK.invoke(factInFactTable))) {
          result = true;
        }
      }
    }
    if (result == true) {
      if ((factTable != null)) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(fact, "Fact does not have unique identifier!", "r:b10ef954-55f4-4774-8fb6-82453f7c9940(Facts.typesystem)", "5232408671159614617", null, errorTarget);
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0x2aacdfbf487f43acL, 0xa43119468403f2c5L, 0xe475eafb2f47ca7L, "Facts.structure.Fact");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
}
