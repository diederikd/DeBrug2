package SQL.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_BIGINT;
  private ConceptPresentation props_COLUMN;
  private ConceptPresentation props_COLUMNDEFINITION;
  private ConceptPresentation props_COLUMNReference;
  private ConceptPresentation props_CREATEPROCEDURE;
  private ConceptPresentation props_CREATETABLE;
  private ConceptPresentation props_DATATYPE;
  private ConceptPresentation props_DATE;
  private ConceptPresentation props_DATETIME;
  private ConceptPresentation props_DDL;
  private ConceptPresentation props_DDS;
  private ConceptPresentation props_DML;
  private ConceptPresentation props_DMS;
  private ConceptPresentation props_DROPPROCEDURE;
  private ConceptPresentation props_DROPTABLE;
  private ConceptPresentation props_ENUM;
  private ConceptPresentation props_ENUMERATIONVALUE;
  private ConceptPresentation props_INSERT;
  private ConceptPresentation props_INT;
  private ConceptPresentation props_MEDIUMINT;
  private ConceptPresentation props_NULL;
  private ConceptPresentation props_PARAMETER;
  private ConceptPresentation props_PARAMETERReference;
  private ConceptPresentation props_STATEMENT;
  private ConceptPresentation props_TIME;
  private ConceptPresentation props_USE;
  private ConceptPresentation props_VALUE;
  private ConceptPresentation props_VARCHAR255;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BIGINT:
        if (props_BIGINT == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BIGINT");
          props_BIGINT = cpb.create();
        }
        return props_BIGINT;
      case LanguageConceptSwitch.COLUMN:
        if (props_COLUMN == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_COLUMN = cpb.create();
        }
        return props_COLUMN;
      case LanguageConceptSwitch.COLUMNDEFINITION:
        if (props_COLUMNDEFINITION == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("COLUMNDEFINITION");
          props_COLUMNDEFINITION = cpb.create();
        }
        return props_COLUMNDEFINITION;
      case LanguageConceptSwitch.COLUMNReference:
        if (props_COLUMNReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x8941e8e48f174830L, 0xb99182ab0ce69beeL, 0x1bdede5178cd9132L, 0x1bdede5178cd9133L, "column", "", "");
          props_COLUMNReference = cpb.create();
        }
        return props_COLUMNReference;
      case LanguageConceptSwitch.CREATEPROCEDURE:
        if (props_CREATEPROCEDURE == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CREATEPROCEDURE = cpb.create();
        }
        return props_CREATEPROCEDURE;
      case LanguageConceptSwitch.CREATETABLE:
        if (props_CREATETABLE == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CREATETABLE");
          props_CREATETABLE = cpb.create();
        }
        return props_CREATETABLE;
      case LanguageConceptSwitch.DATATYPE:
        if (props_DATATYPE == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_DATATYPE = cpb.create();
        }
        return props_DATATYPE;
      case LanguageConceptSwitch.DATE:
        if (props_DATE == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DATE");
          props_DATE = cpb.create();
        }
        return props_DATE;
      case LanguageConceptSwitch.DATETIME:
        if (props_DATETIME == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DATETIME");
          props_DATETIME = cpb.create();
        }
        return props_DATETIME;
      case LanguageConceptSwitch.DDL:
        if (props_DDL == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DDL = cpb.create();
        }
        return props_DDL;
      case LanguageConceptSwitch.DDS:
        if (props_DDS == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_DDS = cpb.create();
        }
        return props_DDS;
      case LanguageConceptSwitch.DML:
        if (props_DML == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DML = cpb.create();
        }
        return props_DML;
      case LanguageConceptSwitch.DMS:
        if (props_DMS == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_DMS = cpb.create();
        }
        return props_DMS;
      case LanguageConceptSwitch.DROPPROCEDURE:
        if (props_DROPPROCEDURE == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DROPPROCEDURE = cpb.create();
        }
        return props_DROPPROCEDURE;
      case LanguageConceptSwitch.DROPTABLE:
        if (props_DROPTABLE == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DROPTABLE");
          props_DROPTABLE = cpb.create();
        }
        return props_DROPTABLE;
      case LanguageConceptSwitch.ENUM:
        if (props_ENUM == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ENUM");
          props_ENUM = cpb.create();
        }
        return props_ENUM;
      case LanguageConceptSwitch.ENUMERATIONVALUE:
        if (props_ENUMERATIONVALUE == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ENUMERATIONVALUE = cpb.create();
        }
        return props_ENUMERATIONVALUE;
      case LanguageConceptSwitch.INSERT:
        if (props_INSERT == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("INSERT");
          props_INSERT = cpb.create();
        }
        return props_INSERT;
      case LanguageConceptSwitch.INT:
        if (props_INT == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("INT");
          props_INT = cpb.create();
        }
        return props_INT;
      case LanguageConceptSwitch.MEDIUMINT:
        if (props_MEDIUMINT == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MEDIUMINT");
          props_MEDIUMINT = cpb.create();
        }
        return props_MEDIUMINT;
      case LanguageConceptSwitch.NULL:
        if (props_NULL == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("NULL");
          props_NULL = cpb.create();
        }
        return props_NULL;
      case LanguageConceptSwitch.PARAMETER:
        if (props_PARAMETER == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PARAMETER = cpb.create();
        }
        return props_PARAMETER;
      case LanguageConceptSwitch.PARAMETERReference:
        if (props_PARAMETERReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x8941e8e48f174830L, 0xb99182ab0ce69beeL, 0x1bdede5178cd9138L, 0x1bdede5178cd9139L, "parameter", "", "");
          props_PARAMETERReference = cpb.create();
        }
        return props_PARAMETERReference;
      case LanguageConceptSwitch.STATEMENT:
        if (props_STATEMENT == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_STATEMENT = cpb.create();
        }
        return props_STATEMENT;
      case LanguageConceptSwitch.TIME:
        if (props_TIME == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TIME");
          props_TIME = cpb.create();
        }
        return props_TIME;
      case LanguageConceptSwitch.USE:
        if (props_USE == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("USE");
          props_USE = cpb.create();
        }
        return props_USE;
      case LanguageConceptSwitch.VALUE:
        if (props_VALUE == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_VALUE = cpb.create();
        }
        return props_VALUE;
      case LanguageConceptSwitch.VARCHAR255:
        if (props_VARCHAR255 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("VARCHAR255");
          props_VARCHAR255 = cpb.create();
        }
        return props_VARCHAR255;
    }
    return null;
  }
}
