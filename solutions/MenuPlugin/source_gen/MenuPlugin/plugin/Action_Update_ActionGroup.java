package MenuPlugin.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.actions.GeneratedActionGroup;
import java.util.Set;
import com.intellij.openapi.util.Pair;
import jetbrains.mps.workbench.ActionPlace;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.workbench.action.BaseAction;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.ide.ui.customization.CustomActionsSchema;
import org.jetbrains.annotations.Nullable;

public class Action_Update_ActionGroup extends GeneratedActionGroup {
  public static final String ID = "MenuPlugin.plugin.Action_Update_ActionGroup";
  private Set<Pair<ActionPlace, Condition<BaseAction>>> myPlaces = SetSequence.fromSet(new HashSet<Pair<ActionPlace, Condition<BaseAction>>>());
  public Action_Update_ActionGroup() {
    super("Action_Update", ID);
    this.setIsInternal(false);
    this.setPopup(false);
  }
  public void doUpdate(AnActionEvent event) {
    removeAll();
    CustomActionsSchema cs = new CustomActionsSchema();
    CustomActionsSchema.setCustomizationSchemaForCurrentProjects();
    for (Pair<ActionPlace, Condition<BaseAction>> p : this.myPlaces) {
      this.addPlace(p.first, p.second);
    }
  }
  public void addPlace(ActionPlace place, @Nullable Condition<BaseAction> cond) {
    SetSequence.fromSet(this.myPlaces).addElement(new Pair<ActionPlace, Condition<BaseAction>>(place, cond));
  }
  public boolean isStrict() {
    return false;
  }
}
