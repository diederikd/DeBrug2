package MenuPlugin.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ex.ActionManagerEx;
import com.intellij.ide.DataManager;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import com.intellij.openapi.actionSystem.IdeActions;
import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.ide.ui.customization.CustomActionsSchema;
import com.intellij.ide.ui.customization.ActionUrl;

public class Action_Hide_Action extends BaseAction {
  private static final Icon ICON = null;

  public Action_Hide_Action() {
    super("Hide Menus", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    ActionManager actionManager = ActionManager.getInstance();
    ActionManagerEx actionManagerEx = ActionManagerEx.getInstanceEx();
    DataManager dataManager = DataManager.getInstance();
    DefaultActionGroup RunMenu = (DefaultActionGroup) actionManager.getAction(IdeActions.GROUP_RUN);
    for (AnAction action : RunMenu.getChildActionsOrStubs()) {
      if ((actionManager.getId(action) != null) && actionManager.getId(action).equals("RunMenu")) {
        RunMenu.remove(action);
      }
    }
    CustomActionsSchema cs = new CustomActionsSchema();
    for (ActionUrl actionUrl : cs.getActions()) {
      if (actionUrl.toString().contains("Run")) {
      }
    }
    CustomActionsSchema.setCustomizationSchemaForCurrentProjects();
  }
}
